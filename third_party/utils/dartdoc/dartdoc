#!/bin/bash

# To generate docs for a library, run this script with the path to an entrypoint
# .dart file, like:
#
# $ dartdoc foo.dart
#
# You can also pass in a couple of "special" entrypoints for generating
# docs for dart's built in libraries. The special entrypoints are:
#
# - "corelib": dart:core, dart:coreimpl
# - "dom": dart:core, dart:coreimpl, dart:dom
# - "html": dart:core, dart:coreimpl, dart:dom, dart:html

# Get the .dart lib file the user wants to generate docs for.
# Add the path to it so that we can find it, but only if it's a .dart file and
# not one of the special fake entrypoints like "corelib".
entrypoint=$1
if [[ $1 == *.dart ]]
then
  entrypoint=$PWD/$1
fi

# Run from dartdoc directory to get correct relative paths.
pushd `dirname "$0"` >>/dev/null

compileToJs() {
  if [ "$1.dart" -nt "static/$1.js" ]
    then
    ../../frog/minfrog --libdir=../../frog/lib \
      --out=static/$1.js --compile-only $1.dart
    echo "Compiled $1.dart."
  fi
}

# Generate the client-side .js files if needed.
compileToJs "client-static"
compileToJs "client-live-nav"

# Clean the output directory.
if [ -d "docs" ]; then
    rm -r docs
fi
mkdir docs

# Copy the static files over.
cp -R static/* docs

# Ditch the first arg so we can pass any extra arguments to dartdoc.
shift

# Generate the user's docs.
../../frog/minfrog --libdir=../../frog/lib dartdoc.dart "$entrypoint" $@

popd >>/dev/null